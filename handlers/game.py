import asyncio

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud import UserCRUD
from services.ai_service import AIService
from services.cooldown import CooldownService
from config.constants import GameText, CommandText, AIPromt, Cooldown
import random

router = Router()


@router.message(Command("pidor"))
async def cmd_pidor(message: Message, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    cooldown_status = await CooldownService.check_cooldown(session, message.chat.id)
    if cooldown_status:
        await message.answer(
            f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏–¥–æ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {cooldown_status} ‚è≥"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    users = await UserCRUD.get_chat_users(session, message.chat.id)
    if not users:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üòî")
        return
    await message.answer("–¢–∞–∫ —Ç–∞–∫ —Ç–∞–∫... –ü–æ–≥–æ–¥–∏—Ç–µ-–∫–∞...üîç")

    # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    search_phrases = await AIService.get_response("", AIPromt.SERCHING_PIDOR_PROMT)
    search_phrases = search_phrases.split("|")
    win_phrase = await AIService.get_response("", AIPromt.WIN_PHRASE_PIDOR_PROMT)
    await message.answer(search_phrases[0])
    await asyncio.sleep(1.5)
    await message.answer(search_phrases[1])
    await asyncio.sleep(1.5)

    # –í—ã–±–æ—Ä –ø–∏–¥–æ—Ä–∞ –¥–Ω—è
    pidor = random.choice(users)
    win_phrase = win_phrase.format(
        name=f"@{pidor.username}" if pidor.username else pidor.first_name
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    pidor.pidor_count += 1
    await session.commit()

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ª–¥–∞—É–Ω
    await CooldownService.activate_cooldown(session, message.chat.id, Cooldown.DEFAULT)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(win_phrase)

    if pidor.pidor_count in GameText.ACHIEVEMENTS:
        await message.answer(
            f"üéâ {pidor.first_name if pidor.first_name else pidor.username} –æ—Ç–∫—Ä—ã–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n"
            f"{GameText.ACHIEVEMENTS[pidor.pidor_count][0]}\n"
            f"{GameText.ACHIEVEMENTS[pidor.pidor_count][1]}"
        )

@router.message(Command("stats"))
async def cmd_stats(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return

    users = await UserCRUD.get_chat_users(session, message.chat.id)
    if not users:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üòî")
        return

    medals = ['ü•á', 'ü•à', 'ü•â']
    stats_message_text = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–¥–æ—Ä–∞—Å–æ–≤ —á–∞—Ç–∞ "{message.chat.title}" üëá\n'

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—é pidor_count –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    users.sort(key=lambda x: x.pidor_count, reverse=True)

    for i, user in enumerate(users):
        username = user.username.strip() if user.username and user.username.strip().lower() != 'none' else user.first_name.strip()
        count = user.pidor_count

        medal = medals[i] if i < len(medals) else 'üí©'
        stats_message_text += f"üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® {username} ‚Äî {count} —Ä–∞–∑(–∞) {medal}\n"

    await message.answer(stats_message_text)


@router.message(Command("achievements"))
async def cmd_achievements(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return

    user = await UserCRUD.get_user(session, message.from_user.id, message.chat.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ")
        return

    achievement_lines = ["üéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"]

    for threshold, (title, description) in sorted(GameText.ACHIEVEMENTS.items()):
        achieved = user.pidor_count >= threshold
        status = "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ" if achieved else "üîí –ù–µ –ø–æ–ª—É—á–µ–Ω–æ"
        description = description.replace("‚úÖ", "")
        achievement_lines.append(f"{title}\n‚Ü™Ô∏è {description}\n{status}\n")
    await message.answer("\n".join(achievement_lines))