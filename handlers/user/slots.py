import asyncio
import re

from aiogram import Router
from aiogram.enums import DiceEmoji
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from config.constants import AIPromt
from config.constants import CommandText
from database.crud import UserCRUD
from logger import setup_logger
from services.ai_service import AIService
from services.slots_logic import get_slots_and_multiplier

logger = setup_logger(__name__)

router = Router()


@router.message(Command("slots"))
async def cmd_slots(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        logger.info("Update data rejected: private chat")
        return
    user = await UserCRUD.get_user_by_telegram_id(session, message.from_user.id, message.chat.id)
    if user is None:
        await message.reply("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /reg")
        return
    pattern = r"^/slots\s+(\d+(?:[.,]\d{1,2})?)$"
    match = re.match(pattern, message.text.strip())
    if not match:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π: <code>/slots *—Å—Ç–∞–≤–∫–∞* </code>", parse_mode="HTML")
        return
    bet_str, = match.groups()
    bet = float(bet_str.replace(",", "."))
    if not (0 < bet <= 1000):
        await message.answer("üí∞ –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 ü™ôPidorCoins.")
        return
    if bet > user.balance:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ôPidorCoins.")
        return
    user.balance -= bet
    await session.commit()
    msg = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
    slots, multiplier = get_slots_and_multiplier(msg.dice.value)
    await asyncio.sleep(2)
    emojis = {
        "bar": "BAR",
        "grape": "üçá",
        "lemon": "üçã",
        "seven": "7Ô∏è‚É£"
    }
    slots_display = " | ".join(emojis.get(s, s) for s in slots)
    commission_percent: float = 2.0
    gross_win = bet * multiplier
    reaction_msg = ""
    match multiplier:
        case 0:
            reaction_msg = "–ù–æ–ª—å –∏–∫—Å–æ–≤? –ë—Ä–∞—Ç–∞–Ω—á–∏–∫, –¥–∞–∂–µ –ø–∏–¥–æ—Ä–∞—Å–æ–≤ –±—É–¥—É—Ç —É–≤–∞–∂–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º —Ç–µ–±—è! –°–†–û–ß–ù–û –î–û–î–ï–ü!! üòÇüíî"
        case 2:
            reaction_msg = "–î–≤–∞ –∏–∫—Å–∞? –î–≤–∞ –ø–∏–¥–æ—Ä–∞—Å–∞ —Ç–∞–∫–∏ –∏ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–∏–¥–æ—Ä–∞—Å–∞–º–∏! üòÇüë¨"
        case 5:
            reaction_msg = "–ü—è—Ç—å –∏–∫—Å–æ–≤! –°–æ–±—Ä–∞–ª–∞—Å—å –ø–∏–¥–æ—Ä—Å–∫–∞—è –ø—è—Ç—ë—Ä–∫–∞ ‚Äî —ç—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏–¥–æ—Ä–∞—Å—ã, –∞ –ø–∏–¥–æ—Ä—Å–∫–∏–π –∫–ª–∞–Ω! üòÇüëë"
        case 10:
            reaction_msg = "–î–µ—Å—è—Ç—å –∏–∫—Å–æ–≤? –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏–¥–æ—Ä, —Ç—ã –≥—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä –≥–æ–ª—É–±–∏–∑–º–∞ —Å –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º —à–ª–µ–π—Ñ–æ–º! üëëüòà"
        case 20:
            reaction_msg = "–î–≤–∞–¥—Ü–∞—Ç—å –∏–∫—Å–æ–≤? –¢—ã —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ –ø–∏–¥–æ—Ä–∞, –º–µ–¥–∞–ª—å –∑–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–¥–∞–∫ —Ç–æ—á–Ω–æ –∑–∞—Å–ª—É–∂–∏–ª! üèÖüåü"
        case 50:
            reaction_msg = await AIService.get_response("", ai_prompt=AIPromt.JACKPOT_REACT_PROMPT.format(gross_win))
    commission = round(gross_win * commission_percent / 100, 2)
    net_win = round(gross_win - commission, 2)
    if gross_win != 0:
        user.balance += net_win + bet
        await session.commit()
    await message.answer(
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {slots_display}\n\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet}\n"
        f"üéØ –í—ã–∏–≥—Ä—ã—à: {gross_win} (x{multiplier})\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è {commission_percent}%: -{commission}\n"
        f"üßæ –ò—Ç–æ–≥: +{net_win}\n\n"
        f"üì¶ –ë–∞–ª–∞–Ω—Å: {user.balance} ü™ôPidorCoins"
        f"\n\n{reaction_msg}"
    )
