import asyncio
import re
from datetime import datetime, timedelta, UTC
from random import choice

from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from config.constants import AIPromt, CommandText
from database.CRUD.duel_crud import DuelCRUD
from database.CRUD.currency_transaction_crud import CurrencyTransactionCRUD
from database.CRUD.chat_crud import ChatCRUD
from database.CRUD.user_crud import UserCRUD
from database.models import DuelStatus
from handlers.utils.utils import get_display_name
from logger import setup_logger
from handlers.utils.AI import AI
from services.duel_service import wait_for_acceptance

router = Router()
logger = setup_logger(__name__)


@router.message(Command("duel"))
async def cmd_duel(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return
    initiator = await UserCRUD.get_user_by_telegram_id(session, message.from_user.id, message.chat.id)
    if not initiator:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ.")
        return
    reply = message.reply_to_message

    #–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    pattern_named = r"/duel\s+@(\w+)\s+(\d+(?:[.,]\d{1,2})?)"
    pattern_reply = r"/duel\s+(\d+(?:[.,]\d{1,2})?)"

    if re.match(pattern_named, message.text.strip()):
        match = re.match(pattern_named, message.text.strip())
        username_opponent, bet_str = match.groups()
        opponent_user = await UserCRUD.get_user_by_username(session, username_opponent, message.chat.id)
        if not opponent_user:
            await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username_opponent} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò–ª–∏ —É —ç—Ç–æ–≥–æ \"–æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ\" –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ —Ç–≥.\n\n"
                                 f"–ü–æ–ø—Ä–æ–±—É–π –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>/duel *—Å—Ç–∞–≤–∫–∞*</code>", parse_mode="HTML")
            return
        opponent_display = get_display_name(opponent_user)

    elif reply and re.match(pattern_reply, message.text.strip()):
        match = re.match(pattern_reply, message.text.strip())
        bet_str = match.group(1)
        opponent_user = await UserCRUD.get_user_by_telegram_id(session, reply.from_user.id, message.chat.id)
        if not opponent_user:
            await message.answer("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return
        opponent_display = get_display_name(opponent_user)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            "<code>/duel @username 100</code>\n"
            "<code>/duel 100</code> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
            parse_mode=ParseMode.HTML
        )
        return

    bet = float(bet_str.replace(",", "."))
    if not (0 < bet <= 1000):
        await message.answer("üí∞ –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 PidorCoins.")
        return

    if initiator.telegram_id == opponent_user.telegram_id:
        await message.answer("ü§° –ù–µ–ª—å–∑—è –¥—Ä–∞—Ç—å—Å—è —Å–∞–º–æ–º—É —Å —Å–æ–±–æ–π, —à–∏–∑–∏–∫.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if initiator.balance < bet:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PidorCoins.")
        return
    if opponent_user.balance < bet:
        await message.answer(f"‚ùå –£ –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏
    duel = await DuelCRUD.get_pending_or_active_duel_by_chat(session, message.chat.id)
    if duel:
        created_at = duel.created_at.replace(tzinfo=UTC) if duel.created_at.tzinfo is None else duel.created_at
        if datetime.now(UTC) - created_at > timedelta(minutes=10):
            await DuelCRUD.cancel_duel_with_refund(session, duel)
            logger.info(f"Old duel {duel.id} in chat {duel.chat_id} was cancelled due to timeout")
        else:
            await message.answer("‚öîÔ∏è –£–∂–µ –∏–¥—ë—Ç –¥—É—ç–ª—å –∏–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∑–≤–∞–Ω. –ü–æ–¥–æ–∂–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥—É—ç–ª–∏
    chat = await ChatCRUD.get_chat(session, message.chat.id)
    initiator.balance -= bet
    duel = await DuelCRUD.create_duel(session, chat.id, initiator.id, opponent_user.id, bet)
    await CurrencyTransactionCRUD.create_transaction(session, initiator.id, bet, "duel initiator bet")
    logger.info(
        f"{initiator.telegram_id} initiated a duel with {opponent_user.telegram_id} for {bet} coins in chat {message.chat.id}"
    )
    await session.commit()

    await message.answer(
        f"‚öîÔ∏è{get_display_name(initiator)} "
        f"–≤—ã–∑–≤–∞–ª {opponent_display} –Ω–∞ –¥—É—ç–ª—å –Ω–∞ —Å—É–º–º—É {bet} ü™ô PidorCoins!\n\n"
        "/accept_duel - –ø—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å\n"
        "/cancel_duel - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –¥—É—ç–ª—å",
        parse_mode=ParseMode.HTML
    )

    asyncio.create_task(wait_for_acceptance(message.bot, session, duel.id, message.chat.id))


@router.message(Command("accept_duel"))
async def cmd_accept_duel(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return

    duel = await DuelCRUD.get_pending_confirmation(session, message.chat.id, message.from_user.id)
    if not duel:
        await message.answer("‚ùóÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π.")
        return

    if duel.opponent.balance < duel.amount:
        duel.status = DuelStatus.CANCELLED
        await session.commit()
        await message.answer("üí∏ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info(f"Duel {duel.id} cancelled due to opponent ({get_display_name(duel.opponent)}) lacking funds")
        return

    duel.opponent.balance -= duel.amount
    duel.status = DuelStatus.FINISHED
    duel.accepted_at = datetime.now(UTC)

    initiator = duel.initiator
    opponent = duel.opponent
    winner = choice([initiator, opponent])
    loser = opponent if winner == initiator else initiator
    duel.winner_id = winner.id

    commission = 0.05
    payout = round(duel.amount * 2 * (1 - commission), 2)
    winner.balance += payout

    await CurrencyTransactionCRUD.create_transaction(session, duel.opponent.id, duel.amount, "duel opponent bet")
    await CurrencyTransactionCRUD.create_transaction(session, winner.id, payout, "duel winner payout")
    await session.commit()

    winner_username = winner.username
    loser_username = initiator.username if winner == opponent else opponent.username

    logger.info(
        f"Duel {duel.id} accepted by {get_display_name(duel.opponent)} ‚Äî Winner: {get_display_name(winner)}, Loser: {get_display_name(loser)}, Payout: {payout}")

    await message.bot.send_message(message.chat.id, "üîç–ü–æ–∏—Å–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...")
    duel_fight_message = await AI.get_response("", AIPromt.DUEL_WINNER_CHOICE_PROMPT)
    await asyncio.sleep(2)
    await message.bot.send_message(message.chat.id, duel_fight_message.format(winner=winner_username, loser=loser_username))
    await message.answer(
        f"‚öîÔ∏è –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üèÜ –ü–æ–±–µ–¥–∏–ª: <b>{get_display_name(winner)}</b>\n"
        f"‚ò†Ô∏è –ü—Ä–æ–∏–≥—Ä–∞–ª: {get_display_name(loser)}\n"
        f"üí∞ –í—ã–ø–ª–∞—Ç–∞: {payout} PidorCoins (–∫–æ–º–∏—Å—Å–∏—è {int(commission * 100)}%)",
        parse_mode="HTML"
    )


@router.message(Command("cancel_duel"))
async def cmd_cancel_duel(message: Message, session: AsyncSession):
    if message.chat.type == "private":
        await message.answer(CommandText.WRONG_CHAT)
        return

    duel = await DuelCRUD.get_pending_confirmation(session, message.chat.id, message.from_user.id)
    if not duel:
        await message.answer("‚ùóÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.")
        return

    await DuelCRUD.cancel_duel_with_refund(session, duel)
    await session.commit()

    logger.info(f"{message.from_user.username} cancelled duel {duel.id} in chat {message.chat.id}")

    opponent_username = duel.opponent.username if duel.opponent else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    await message.answer(
        f"‚ùå –î—É—ç–ª—å —Å @{opponent_username} –æ—Ç–º–µ–Ω–µ–Ω–∞.\nü™ô –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å."
    )
