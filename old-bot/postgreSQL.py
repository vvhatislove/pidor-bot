import psycopg2


class PostgreSQL:
    def __init__(self, database, user, password, host, port):
        self.connection = psycopg2.connect(
            database=database,
            user=user,
            password=password,
            host=host,
            port=port
        )
        self.cursor = self.connection.cursor()

    def user_exists(self, user_id, chat_id):
        with self.connection:
            self.cursor.execute(
                f"SELECT * FROM users WHERE userid = {user_id} AND chatid = {chat_id}"
            )
            return self.cursor.fetchone()

    def add_user(self, user_id, chat_id, first_name, username, date):
        with self.connection:
            return self.cursor.execute(
                f"INSERT INTO users (userid,chatid,first_name,username,pidorCount,date) VALUES ({user_id}, {chat_id}, '{first_name}', '{username}', 0, {date})"
            )

    def delete_user(self, table_id):
        with self.connection:
            return self.cursor.execute(
                f"DELETE FROM users WHERE id={table_id}"
            )

    def get_reg_users(self, chat_id):
        with self.connection:
            self.cursor.execute(
                f"SELECT * FROM users WHERE chatid = {chat_id}"
            )
            return self.cursor.fetchall()

    def set_pidor_count(self, chat_id, user_id, pidor_count):
        with self.connection:
            return self.cursor.execute(
                f"UPDATE users SET pidorCount={pidor_count} WHERE chatId={chat_id} AND userId={user_id}"
            )

    def update_data(self, user_id, new_username, new_first_name):
        with self.connection:
            return self.cursor.execute(
                f"UPDATE users SET first_name='{new_first_name}', username='{new_username}' WHERE userId={user_id}"
            )

    def get_all_chat_id(self):
        with self.connection:
            self.cursor.execute(
                "SELECT DISTINCT chatid FROM users ORDER BY chatid"
            )
            return self.cursor.fetchall()

    def add_cooldown(self, chat_id, date):
        with self.connection:
            return self.cursor.execute(
                f"INSERT INTO cooldown (chatid,date) VALUES ({chat_id}, {date})"
            )

    def get_cooldown(self, chat_id):
        with self.connection:
            self.cursor.execute(
                f"SELECT * FROM cooldown WHERE chatid = {chat_id}"
            )
            return self.cursor.fetchone()

    def delete_cooldown(self, table_id):
        with self.connection:
            return self.cursor.execute(
                f"DELETE FROM cooldown WHERE id={table_id}"
            )

    def get_cooldown_time(self):
        with self.connection:
            self.cursor.execute(
                "SELECT * FROM cooldown_time WHERE id=1"
            )
            return self.cursor.fetchone()

    def set_cooldown_time(self, new_cd_time):
        with self.connection:
            self.cursor.execute(
                f"UPDATE cooldown_time SET cd_time={new_cd_time} WHERE id=1"
            )

    def create_table_cooldown(self):
        with self.connection:
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS cooldown (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            chatid BIGINT NOT NULL,
            date BIGINT NOT NULL
            );''')

    def create_table_users(self):
        with self.connection:
            self.cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            userid BIGINT NOT NULL,
            chatid BIGINT NOT NULL,
            first_name character(256),
            username character(256),
            pidorCount BIGINT,
            date BIGINT
            );''')

    def close(self):
        self.connection.close()
